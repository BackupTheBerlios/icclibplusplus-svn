#include "iccTagProfileSequenceDesc.h"using namespace std;USING_ICC_LIB_NAMESPACE//--------------------------------------------------------------------iccTagProfileSequenceDesc& iccTagProfileSequenceDesc::operator=(const iccTagProfileSequenceDesc& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_profileDescriptions = inTag.m_profileDescriptions;	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagProfileSequenceDesc::GetSizeSelf(void) const{	iccNumberUInt32		imax	= 0,						i		= 0;	unsigned long		size	= 0;		for(i=0,imax=m_profileDescriptions.size(); i<imax; i++)		size += m_profileDescriptions[i].GetSize();	return	size;}//--------------------------------------------------------------------iccError iccTagProfileSequenceDesc::LoadSelf(istream& inStream,unsigned long inSize){	ProfileDescription	profDesc;	iccNumberUInt32		count	= 0,						i		= 0;	inStream >> count;	inSize -= sizeof count;		for(i=0; i<count; i++)	{		profDesc.Load(inStream, inSize);		m_profileDescriptions.push_back(profDesc);		inSize -= profDesc.GetSize();	}		return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagProfileSequenceDesc::SaveSelf(ostream& outStream,unsigned long& outSize) const{	iccNumberUInt32		count	= 0,						i		= 0;	count = m_profileDescriptions.size();	outStream << count;	for(i=0; i<count; i++)	{		m_profileDescriptions[i].Save(outStream, outSize);		outSize += m_profileDescriptions[i].GetSize();	}		return iccErrorNone;}