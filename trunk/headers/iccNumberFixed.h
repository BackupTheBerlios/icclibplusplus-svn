#ifndef _H_iccNumberFixed_H_#define _H_iccNumberFixed_H_#include "iccObject.h"#include <string>#include <istream>#include <ostream>ICC_LIB_NAMESPACE_STARTtemplate <typename I,typename F> class iccNumberFixed:	public iccObject{public:                    			iccNumberFixed(void);                    			iccNumberFixed(const iccNumberFixed& inNumber)                    			{                    				*this = inNumber;                    			}                    			iccNumberFixed(float inFloat)                    			{                    				FromFloat(inFloat);                    			}                    			iccNumberFixed(double inDouble)                    			{                    				FromDouble(inDouble);                    			}                    			iccNumberFixed(const std::string inString)                    			{                    				FromString(inString);                    			}        	iccNumberFixed&			operator=(const iccNumberFixed &inNumber)        						{									if(this != &inNumber)									{	        							m_integer = inNumber.GetInteger();										m_fractional = inNumber.GetFractional();									}        							return *this;        						}		bool					operator==(const iccNumberFixed& inFixed)								const								{									if(										m_integer == inFixed.m_integer										&& m_fractional == inFixed.m_fractional									)										return true;									else										return false;								}		bool					operator!=(const iccNumberFixed& inFixed)								const								{									return ! operator==(inFixed);								}friend	void					operator>>(std::istream& inStream,iccNumberFixed& inFixed);friend	std::ostream&			operator<<(std::ostream& outStream,const iccNumberFixed& inFixed);    	void        			FromFloat(float inFloat);    	void					FromDouble(double inDouble);    	void					FromString(const std::string& inString);        	float					ToFloat(void) const;    	double					ToDouble(void) const;    	void					ToString(std::string& outString) const;        	void					SetInteger(I inValue)    							{    					    		m_integer = inValue;    					    	}    	void					SetFractional(I inValue)    							{    					    		m_fractional = inValue;    					    	}		I						GetInteger(void) const    							{    					    		return m_integer;    					    	}		F						GetFractional(void) const    							{    								return m_fractional;    							}		unsigned long			GetSize(void) const								{return sizeof m_integer + sizeof m_fractional;}private:		I						m_integer;		F						m_fractional;		double					m_range;};//--------------------------------------------------------------------template <typename I,typename F>void operator>>(std::istream& inStream,iccNumberFixed<I,F>& inFixed){	inStream >> inFixed.m_integer;	inStream >> inFixed.m_fractional;}//--------------------------------------------------------------------template <typename I,typename F>std::ostream& operator<<(std::ostream& outStream,const iccNumberFixed<I,F>& inFixed){	outStream << inFixed.m_integer;	outStream << inFixed.m_fractional;	return outStream;}typedef iccNumberFixed<unsigned char,unsigned char>		iccNumberU8Fixed8;typedef iccNumberFixed<unsigned short,unsigned short>	iccNumberU16Fixed16;typedef iccNumberFixed<short,unsigned short>			iccNumberS15Fixed16;ICC_LIB_NAMESPACE_END#endif//_H_iccNumberFixed_H_