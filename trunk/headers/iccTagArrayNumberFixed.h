#ifndef _H_iccTagArrayNumberFixed_H_#define _H_iccTagArrayNumberFixed_H_#include "iccTag.h"#include "iccDefines.h"#include <vector>ICC_LIB_NAMESPACE_STARTtemplate <typename T> class iccTagArrayNumberFixed:	public iccTag{public:        									iccTagArrayNumberFixed(void)        									:m_numbers()        									{}        									iccTagArrayNumberFixed(const iccTagArrayNumberFixed& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagArrayNumberFixed(void)        									{}			iccTagArrayNumberFixed&			operator=(const iccTagArrayNumberFixed& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									if(T == iccNumberS15Fixed16)            										return iccS15Fixed16ArrayType;            									else            									if(T == iccNumberU16Fixed16)            										return iccU16Fixed16ArrayType;            								}protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const;	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList);private:			std::vector<T>					m_numbers;};typedef iccTagArrayNumberFixed<iccNumberS15Fixed16>	iccTagArrayS15Fixed16;typedef iccTagArrayNumberFixed<iccNumberU16Fixed16>	iccTagArrayU16Fixed16;ICC_LIB_NAMESPACE_END#endif//_H_iccTagArrayNumberFixed_H_