#ifndef _H_iccTagXYZ_H_#define _H_iccTagXYZ_H_#include "iccTag.h"#include "iccDefines.h"#include <string>#include <vector>ICC_LIB_NAMESPACE_STARTclass iccTagNamedColor2Type:	public iccTag{public:        									iccTagNamedColor2Type(void)        									:	m_vendorSpecificFlag(0),m_count(0),m_nbDeviceCoordinates(0),        										m_namePrefix(),m_nameSuffix(),m_colors()        									{}        									iccTagNamedColor2Type(const iccTagNamedColor2Type& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagNamedColor2Type(void)        									{}			iccTagNamedColor2Type&			operator=(const iccTagNamedColor2Type& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									return iccNamedColor2Type;            								}protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const;	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList); private:	struct NamedColor	{											NamedColor()											:m_rootName(),m_deviceCoordinates()											{												memset(m_pcsCoordinates, 0, sizeof m_pcsCoordinates);											}  				NamedColor&					operator=(const NamedColor &inColor)                            				{            									if(this != &inColor)            	                				{            	                					m_rootName = inColor.m_rootName;            	                					memcpy(m_pcsCoordinates, inColor.m_pcsCoordinates, sizeof m_pcsCoordinates);            	                					m_deviceCoordinates = inColor.m_deviceCoordinates;            	                				}                            					return *this;                            				}				unsigned long				GetSize(void) const           									{           										return	32           												+ sizeof m_pcsCoordinates           												+ m_deviceCoordinates.size()*sizeof(iccNumberUInt16);           									}			std::string						m_rootName;			iccNumberUInt16					m_pcsCoordinates[3];			std::vector<iccNumberUInt16>	m_deviceCoordinates;	};			iccFourByteType					m_vendorSpecificFlag;			iccNumberUInt32					m_count;			iccNumberUInt32					m_nbDeviceCoordinates;			std::string						m_namePrefix;			std::string						m_nameSuffix;			std::vector<NamedColor>			m_colors;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagXYZ_H_