#ifndef _H_iccTagProfileSequenceDesc_H_#define _H_iccTagProfileSequenceDesc_H_#include "iccTag.h"#include "iccDefines.h"#include "iccTagMultiLocalizedUnicode.h"#include <vector>ICC_LIB_NAMESPACE_STARTclass iccTagProfileSequenceDesc:	public iccTag{public:        									iccTagProfileSequenceDesc(void)        									:m_profileDescriptions()											{}        									iccTagProfileSequenceDesc(const iccTagProfileSequenceDesc& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagProfileSequenceDesc(void)        									{}			iccTagProfileSequenceDesc&		operator=(const iccTagProfileSequenceDesc& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									return iccProfileSequenceDescType;            								}protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const; 	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList);private:	struct	ProfileDescription	{											ProfileDescription()											:	m_manufacturerSignature(0),m_modelSignature(0),												m_attributes(0),m_technology(0),												m_manufacturerDescription(),m_modelDescription()											{}		iccError							Load(std::istream& inStream,unsigned long inSize)											{												unsigned long	dummy	= 0;												inStream >> m_manufacturerSignature;												inStream >> m_modelSignature;												inStream >> m_attributes;												inStream >> m_technology;												m_manufacturerDescription.Load(inStream, dummy);												m_modelDescription.Load(inStream, dummy);												return iccErrorNone;											}		iccError							Save(std::ostream& outStream,unsigned long& outSize) const											{												unsigned long	dummy	= 0;												outStream << m_manufacturerSignature;												outStream << m_modelSignature;												outStream << m_attributes;												outStream << m_technology;												m_manufacturerDescription.Save(outStream, dummy);												m_modelDescription.Save(outStream, dummy);												return iccErrorNone;											}		unsigned long						GetSize(void) const           									{           										return	sizeof m_manufacturerSignature														+ sizeof m_modelSignature														+ sizeof m_attributes														+ sizeof m_technology														+ m_manufacturerDescription.GetSize()														+ m_modelDescription.GetSize();           									}		iccFourByteType						m_manufacturerSignature;		iccFourByteType						m_modelSignature;		iccEightByteType					m_attributes;		iccFourByteType						m_technology;		iccTagMultiLocalizedUnicode			m_manufacturerDescription;		iccTagMultiLocalizedUnicode			m_modelDescription;	};			std::vector<ProfileDescription>	m_profileDescriptions;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagProfileSequenceDesc_H_