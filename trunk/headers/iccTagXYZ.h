#ifndef _H_iccTagXYZ_H_#define _H_iccTagXYZ_H_#include "iccTag.h"#include "iccDefines.h"#include "iccNumberXYZ.h"#include <vector>ICC_LIB_NAMESPACE_STARTclass iccTagXYZ:	public iccTag{public:        									iccTagXYZ(void)        									:m_numbers()        									{}        									iccTagXYZ(const iccTagXYZ& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagXYZ(void)        									{}			iccTagXYZ&						operator=(const iccTagXYZ& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									return iccXYZType;            								}protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const;	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList); private:			std::vector<iccNumberXYZ>		m_numbers;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagXYZ_H_