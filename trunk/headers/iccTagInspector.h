#ifndef _H_iccTagInspector_H_#define _H_iccTagInspector_H_#include "iccBasicNumericTypes.h"ICC_LIB_NAMESPACE_STARTclass iccTagInspector{public:	/**	*	Tag error severity	*/	enum	{		ICC_TAG_ERROR_SEVERITY_MINOR = 0x00,		ICC_TAG_ERROR_SEVERITY_MAJOR,		ICC_TAG_ERROR_SEVERITY_CRITICAL	};	/**	*	Generic tag error	*/	enum	{		ICC_TAG_GENERIC_ERROR_NONE = 0x00		,ICC_TAG_GENERIC_ERROR_BAD_VALUE		,ICC_TAG_GENERIC_ERROR_BAD_STRING		,ICC_TAG_GENERIC_ERROR_ELEMENT_COUNT_MISMATCH#pragma message("TO DO: define other values")	};	/**	*	Specific tag error	*/	enum	{		ICC_TAG_SPECIFIC_ERROR_NONE = 0x00		// All tag types		,ICC_TAG_SPECIFIC_ERROR_BAD_TYPE_SIGNATURE		,ICC_TAG_SPECIFIC_ERROR_BAD_RESERVED_VALUE		// Chromaticity type		,ICC_TAG_SPECIFIC_ERROR_BAD_NB_CHANNELS		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_TYPE		,ICC_TAG_SPECIFIC_ERROR_BAD_CHANNELS_VALUES		// Colorant order type		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_COUNT		,ICC_TAG_SPECIFIC_ERROR_COLORANT_COUNT_MISMATCH		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_ORDER		// Colorant table type		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_COUNT_IN_TABLE		,ICC_TAG_SPECIFIC_ERROR_COLORANT_COUNT_IN_TABLE_MISMATCH		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_NAME		,ICC_TAG_SPECIFIC_ERROR_BAD_COLORANT_COORDINATES		// Curve type		,ICC_TAG_SPECIFIC_ERROR_BAD_COUNT_VALUE		// Data type		,ICC_TAG_SPECIFIC_ERROR_BAD_STRING		// Date time type		,ICC_TAG_SPECIFIC_ERROR_BAD_DATE		// Measurement type		,ICC_TAG_ERROR_MEASUREMENT_BAD_STANDARD_OBSERVER_VALUE		,ICC_TAG_ERROR_MEASUREMENT_BAD_TRISTIMULUS_VALUE		,ICC_TAG_ERROR_MEASUREMENT_BAD_MEASUREMENT_GEOMETRY_VALUE		,ICC_TAG_ERROR_MEASUREMENT_BAD_MEASUREMENT_FLARE_VALUE		,ICC_TAG_ERROR_MEASUREMENT_BAD_STANDARD_ILLUMINANT_VALUE		// Parametric curve type		,ICC_TAG_ERROR_PARAMETRIC_CURVE_BAD_FUNCTION_TYPE		,ICC_TAG_ERROR_PARAMETRIC_CURVE_BAD_RESERVED_VALUE		,ICC_TAG_ERROR_PARAMETRIC_CURVE_NB_PARAMETERS_MISMATCH		// Text type		,ICC_TAG_ERROR_TEXT_NO_TERMINATING_ZERO		// Viewing conditions type		,ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_VALUE		,ICC_TAG_SPECIFIC_ERROR_BAD_SURROUND_VALUE		,ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_TYPE		// XYZ type		,ICC_TAG_SPECIFIC_ERROR_BAD_XYZ_NUMBER	};							iccTagInspector(void)							:	m_tagSignature(0), m_tagTypeSignature(0),								m_error(ICC_TAG_SPECIFIC_ERROR_NONE)							{}							iccTagInspector							(								iccNumberUInt32 inTagSignature,iccNumberUInt32 inTagTypeSignature,								unsigned char inSeverity,bool inAutoCorrect,								unsigned char inGenericDescription,unsigned char inSpecificDescription							)							{								SetError(									inTagSignature, inTagTypeSignature,									inSeverity, inAutoCorrect,									inGenericDescription, inSpecificDescription								);							}	bool					IsTagValid(void) const							{								return (m_error == 0);							}	void					SetTagSignature(iccNumberUInt32 inTagSignature)							{								m_tagSignature = inTagSignature;							}	void					SetTagTypeSignature(iccNumberUInt32 inTagTypeSignature)							{								m_tagTypeSignature  = inTagTypeSignature;							}	void					SetError							(								iccNumberUInt32 inTagSignature,iccNumberUInt32 inTagTypeSignature,								unsigned char inSeverity,bool inAutoCorrection,								unsigned char inGenericDescription,unsigned char inSpecificDescription							)							{								SetTagSignature(inTagSignature);								SetTagTypeSignature(inTagTypeSignature);								SetSeverity(inSeverity);								SetAutoCorrection(inAutoCorrection);								SetGenericDescription(inGenericDescription);								SetSpecificDescription(inSpecificDescription);							}	iccNumberUInt32			GetTagSignature(void) const							{								return m_tagSignature;							}	iccNumberUInt32			GetTagTypeSignature(void) const							{								return m_tagTypeSignature;							}	unsigned char			GetSpecificError(void) const							{								return (unsigned char)((m_error & ERROR_MASK_SPECIFIC_DESCRIPTION) >> ERROR_SHIFT_SPECIFIC_DESCRIPTION);							}	bool					IsAutoCorrective(void) const							{								return (bool)((m_error & ERROR_MASK_AUTOCORRECTION) >> ERROR_SHIFT_AUTOCORRECTION);							}	void					Reset(void)							{								m_tagSignature = 0;								m_tagTypeSignature = 0;								m_error = ICC_TAG_SPECIFIC_ERROR_NONE;							}protected:private:	enum	{		ERROR_FIELD_LENGTH_SEVERITY				= 8,		ERROR_FIELD_LENGTH_AUTOCORRECTION		= 1,		ERROR_FIELD_LENGTH_GENERIC_DESCRIPTION	= 8,		ERROR_FIELD_LENGTH_SPECIFIC_DESCRIPTION	= 8	};	enum	{		ERROR_SHIFT_SEVERITY				= 	0,		ERROR_SHIFT_AUTOCORRECTION			= 	ERROR_SHIFT_SEVERITY												+ ERROR_FIELD_LENGTH_SEVERITY,		ERROR_SHIFT_GENERIC_DESCRIPTION		= 	ERROR_SHIFT_AUTOCORRECTION												+ ERROR_FIELD_LENGTH_AUTOCORRECTION,		ERROR_SHIFT_SPECIFIC_DESCRIPTION	= 	ERROR_SHIFT_GENERIC_DESCRIPTION												+ ERROR_FIELD_LENGTH_GENERIC_DESCRIPTION	};	enum	{		ERROR_MASK_SEVERITY				= ((1 << ERROR_FIELD_LENGTH_SEVERITY) - 1)											<< ERROR_SHIFT_SEVERITY,		ERROR_MASK_AUTOCORRECTION		= ((1 << ERROR_FIELD_LENGTH_AUTOCORRECTION) - 1)											<< ERROR_SHIFT_AUTOCORRECTION,		ERROR_MASK_GENERIC_DESCRIPTION	= ((1 << ERROR_FIELD_LENGTH_GENERIC_DESCRIPTION) - 1)											<< ERROR_SHIFT_GENERIC_DESCRIPTION,		ERROR_MASK_SPECIFIC_DESCRIPTION	= ((1 << ERROR_FIELD_LENGTH_SPECIFIC_DESCRIPTION) - 1)											<< ERROR_SHIFT_SPECIFIC_DESCRIPTION	};		void					SetSeverity(unsigned char inSeverity)							{								m_error |=	(inSeverity << ERROR_SHIFT_SEVERITY)											& ERROR_MASK_SEVERITY;							}	void					SetAutoCorrection(bool inAutoCorrection)							{								m_error |=	(inAutoCorrection << ERROR_SHIFT_AUTOCORRECTION)											& ERROR_MASK_AUTOCORRECTION;							}	void					SetGenericDescription(unsigned char inDescription)							{								m_error |=	(inDescription << ERROR_SHIFT_GENERIC_DESCRIPTION)											& ERROR_MASK_GENERIC_DESCRIPTION;							}	void					SetSpecificDescription(unsigned char inDescription)							{								m_error |=	(inDescription << ERROR_SHIFT_SPECIFIC_DESCRIPTION)											& ERROR_MASK_SPECIFIC_DESCRIPTION;							}	iccNumberUInt32			m_tagSignature;	iccNumberUInt32			m_tagTypeSignature;	/**	*	- 8 bits for severity	*	- 1 bit for ability to auto-correction	*	- 8 bits for generic description	*	- 8 bits for specific description	*/	iccEightByteType		m_error;};ICC_LIB_NAMESPACE_END#endif //_H_iccTagInspector_H_