#include "iccTagViewingConditions.h"using namespace std;USING_ICC_LIB_NAMESPACE//--------------------------------------------------------------------iccTagViewingConditions& iccTagViewingConditions::operator=(const iccTagViewingConditions& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_illuminant		= inTag.m_illuminant;		m_surround			= inTag.m_surround;		m_illuminantType	= inTag.m_illuminantType;	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagViewingConditions::GetSizeSelf(void) const{	return	m_illuminant.GetSize()			+ m_surround.GetSize()			+ sizeof m_illuminantType;}//--------------------------------------------------------------------iccError iccTagViewingConditions::LoadSelf(istream& inStream,unsigned long inSize){	inStream >> m_illuminant;	inSize -= m_illuminant.GetSize();		inStream >> m_surround;	inSize -= m_surround.GetSize();		inStream >> m_illuminantType;	inSize -= sizeof m_illuminantType;		return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagViewingConditions::SaveSelf(ostream& outStream,unsigned long& outSize) const{	outStream << m_illuminant;	outSize += m_illuminant.GetSize();		outStream << m_surround;	outSize += m_surround.GetSize();		outStream << m_illuminantType;	outSize +=  sizeof m_illuminantType;		return iccErrorNone;}//--------------------------------------------------------------------void iccTagViewingConditions::InspectSelf(std::vector<iccTagInspector>& outErrorList) const{	if(!m_illuminant.IsValid())		outErrorList.push_back(	iccTagInspector(									GetSignature(),									GetTypeSignature(),									iccTagInspector::ICC_TAG_ERROR_SEVERITY_MINOR,									true,									iccTagInspector::ICC_TAG_GENERIC_ERROR_BAD_VALUE,									iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_VALUE								) );	if(!m_surround.IsValid())		outErrorList.push_back(	iccTagInspector(									GetSignature(),									GetTypeSignature(),									iccTagInspector::ICC_TAG_ERROR_SEVERITY_MINOR,									true,									iccTagInspector::ICC_TAG_GENERIC_ERROR_BAD_VALUE,									iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_SURROUND_VALUE								) );	if(iccStandardIlluminant_Max <= m_illuminantType)		outErrorList.push_back(	iccTagInspector(									GetSignature(),									GetTypeSignature(),									iccTagInspector::ICC_TAG_ERROR_SEVERITY_MINOR,									true,									iccTagInspector::ICC_TAG_GENERIC_ERROR_BAD_VALUE,									iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_TYPE								) );}//--------------------------------------------------------------------void iccTagViewingConditions::AutoCorrectSelf(const vector<iccTagInspector>& inErrorList){	vector<iccTagInspector>::const_iterator	itError,											itErrorEnd;	for(itError=inErrorList.begin(),itErrorEnd=inErrorList.end(); itError!=itErrorEnd; itError++)	{		if(			itError->GetTagSignature() == GetSignature()			&& itError->GetTagTypeSignature() == GetTypeSignature()			&& itError->IsAutoCorrective()		)			switch(itError->GetSpecificError())			{				case iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_VALUE:					m_illuminant.AutoCorrect();					break;				case iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_SURROUND_VALUE:					m_surround.AutoCorrect();					break;				case iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_ILLUMINANT_TYPE:					m_illuminantType = iccStandardIlluminant_Unknown;					break;				default:					break;			}	}}