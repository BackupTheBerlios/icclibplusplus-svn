#include "iccTagXYZ.h"using namespace std;USING_ICC_LIB_NAMESPACE//--------------------------------------------------------------------iccTagXYZ& iccTagXYZ::operator=(const iccTagXYZ& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_numbers = inTag.m_numbers;	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagXYZ::GetSizeSelf(void) const{	return	m_numbers.size() * m_numbers[0].GetSize();}//--------------------------------------------------------------------iccError iccTagXYZ::LoadSelf(istream& inStream,unsigned long inSize){	iccNumberXYZ	xyz;	long			size = inSize;	m_numbers.clear();	while(	0 < size			&& !inStream.eof() )	{		inStream >> xyz;		m_numbers.push_back(xyz);		size -= xyz.GetSize();	}		return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagXYZ::SaveSelf(ostream& outStream,unsigned long& outSize) const{	unsigned long	i		= 0,					imax	= 0;	for(i=0,imax=m_numbers.size(); i<imax; i++)	{		outStream << m_numbers[i];		outSize += m_numbers[i].GetSize();	}	return iccErrorNone;}//--------------------------------------------------------------------void iccTagXYZ::InspectSelf(std::vector<iccTagInspector>& outErrorList) const{	unsigned long	i		= 0,					imax	= 0;		for(i=0,imax=m_numbers.size(); i<imax; i++)		if(!m_numbers[i].IsValid())		{			outErrorList.push_back(	iccTagInspector(										GetSignature(),										GetTypeSignature(),										iccTagInspector::ICC_TAG_ERROR_SEVERITY_MINOR,										true,										iccTagInspector::ICC_TAG_GENERIC_ERROR_BAD_VALUE,										iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_XYZ_NUMBER									) );			break;		}}//--------------------------------------------------------------------void iccTagXYZ::AutoCorrectSelf(const vector<iccTagInspector>& inErrorList){	vector<iccTagInspector>::const_iterator	itError,											itErrorEnd;	for(itError=inErrorList.begin(),itErrorEnd=inErrorList.end(); itError!=itErrorEnd; itError++)	{		if(			itError->GetTagSignature() == GetSignature()			&& itError->GetTagTypeSignature() == GetTypeSignature()			&& itError->IsAutoCorrective()		)			switch(itError->GetSpecificError())			{				case iccTagInspector::ICC_TAG_SPECIFIC_ERROR_BAD_XYZ_NUMBER:				{					unsigned long	i		= 0,									imax	= 0;										for(i=0,imax=m_numbers.size(); i<imax; i++)						if(!m_numbers[i].IsValid())							m_numbers[i].AutoCorrect();					break;				}				default:					break;			}	}}