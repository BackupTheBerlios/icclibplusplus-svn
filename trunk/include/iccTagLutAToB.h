#ifndef _H_iccTagLutAToB_H_#define _H_iccTagLutAToB_H_#include "iccTag.h"#include "iccDefines.h"#include "iccNumberFixed.h"#include <vector>#define ICCTAGLUTATOB_MATRIX_SIZE	12ICC_LIB_NAMESPACE_STARTclass iccTagLutAToB:	public iccTag{public:        									iccTagLutAToB(void)        									:	m_nbInputChannels(0),m_nbOutputChannels(0),        										m_padding(0),        										m_offsetToB(0),m_offsetToMatrix(0),m_offsetToM(0),m_offsetToCLUT(0),m_offsetToA(0),        										m_B(NULL),m_matrix(NULL),m_M(NULL),m_CLUT(NULL),m_A(NULL)        									{}        									iccTagLutAToB(const iccTagLutAToB& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagLutAToB(void);			iccTagLutAToB&					operator=(const iccTagLutAToB& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									return iccLutAtoBType;            								}protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const;	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList);private:	struct	CLUT	{											CLUT()											:	m_nbGridPoints(),m_precision(0),												m_padding(0),m_dataPoints()											{}											CLUT(const CLUT& inLUT)											{												*this = inLUT;											}											CLUT(const CLUT* inLUT)											{												if(inLUT != NULL)													*this = *inLUT;											}			CLUT&							operator=(const CLUT& inLUT);			size_t							GetSize();						std::vector<iccNumberUInt8>		m_nbGridPoints;			iccNumberUInt8					m_precision;			iccTwoByteType					m_padding;			std::vector<iccNumberUInt16>	m_dataPoints;	};			iccNumberUInt8						m_nbInputChannels;			iccNumberUInt8						m_nbOutputChannels;			iccOneByteType						m_padding;			iccNumberUInt32						m_offsetToB;			iccNumberUInt32						m_offsetToMatrix;			iccNumberUInt32						m_offsetToM;			iccNumberUInt32						m_offsetToCLUT;			iccNumberUInt32						m_offsetToA;			iccTag*								m_B;			std::vector<iccNumberS15Fixed16>	m_matrix;			iccTag*								m_M;			CLUT*								m_CLUT;			iccTag*								m_A;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagLutAToB_H_