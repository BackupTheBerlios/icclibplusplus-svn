#ifndef _H_iccTagXYZ_H_#define _H_iccTagXYZ_H_#include "iccTag.h"#include "iccDefines.h"#include "iccNumberXYZ.h"#include <vector>ICC_LIB_NAMESPACE_STARTclass iccTagColorantOrder:	public iccTag{public:        									iccTagColorantOrder(void)        									:m_count(0),m_colorants(),m_requiredNbChannels(0)        									{}        									iccTagColorantOrder(const iccTagColorantOrder& inTag)        									{        										*this = inTag;        									}    virtual									~iccTagColorantOrder(void)        									{}			iccTagColorantOrder&			operator=(const iccTagColorantOrder& inTag);	virtual	iccNumberUInt32					GetSpecifiedTypeSignature(void) const											{            									return iccColorantOrderType;            								}            void							SetRequiredNbChannels(iccNumberUInt32 inNbChannels)								            {								            	m_requiredNbChannels = inNbChannels;								            }protected:	virtual	iccError						LoadSelf(std::istream& inStream,unsigned long inSize);	virtual	iccError						SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long					GetSizeSelf(void) const;	virtual	void							InspectSelf(std::vector<iccTagInspector>& outErrorList) const = 0;	virtual	void							AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList) = 0;private:			iccNumberUInt32					m_count;			std::vector<iccOneByteType>		m_colorants;			/**			*	Number of channels corresponding to profile color space.			*/			iccNumberUInt32					m_requiredNbChannels;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagXYZ_H_