#ifndef _H_iccTagLut8_H_#define _H_iccTagLut8_H_#include "iccTag.h"#include "iccBasicNumericTypes.h"#include "iccDefines.h"#include <vector>ICC_LIB_NAMESPACE_STARTclass iccTagLut8:	public iccTag{public:	       										iccTagLut8(void)												:	m_nbInputChannels(0),m_nbOutputChannels(0),													m_nbClutGridPoints(0),m_padding(0),m_matrix(),													m_inputTables(NULL),m_clutValues(NULL),m_outputTables(NULL)												{}        										iccTagLut8(const iccTagLut8& inTag)        										{        											*this = inTag;        										};    virtual										~iccTagLut8(void);				iccTagLut8&							operator=(const iccTagLut8& inTag);	virtual	iccNumberUInt32						GetSpecifiedTypeSignature(void)        										{        											return iccLut8Type;        										};			iccNumberUInt8						GetNbInputChannels(void) const												{													return m_nbInputChannels;												}			iccNumberUInt8						GetNbOutputChannels(void) const												{													return m_nbOutputChannels;												}			iccNumberUInt8						GetNbClutGridPoints(void) const												{													return m_nbClutGridPoints;												}			iccNumberUInt8						GetPadding(void) const												{													return m_padding;												}	const	std::vector<iccNumberS15Fixed16>	GetMatrix(void) const												{													return m_matrix;												}			iccNumberUInt32						GetInputTablesSize(void) const												{													return m_nbInputChannels * 256;												}	const	iccNumberUInt8*						GetInputTables(void) const												{													return m_inputTables;												}			iccNumberUInt32						GetClutValuesSize(void) const												{													return	(unsigned long)pow((float)m_nbClutGridPoints,(float)m_nbInputChannels)															* m_nbOutputChannels;												}	const	iccNumberUInt8*						GetClutValues(void) const												{													return m_clutValues;												}			iccNumberUInt32						GetOutputTablesSize(void) const												{													return m_nbOutputChannels * 256;												}	const	iccNumberUInt8*						GetOutputTables(void) const												{													return m_outputTables;												}protected:	virtual	iccError							LoadSelf(std::istream& inStream,unsigned long inSize );	virtual	iccError							SaveSelf(std::ostream& outStream,unsigned long& outSize) const;	virtual	unsigned long						GetSizeSelf(void) const;	virtual	void								InspectSelf(std::vector<iccTagInspector>& outErrorList) const;	virtual	void								AutoCorrectSelf(const std::vector<iccTagInspector>& inErrorList);private:			iccNumberUInt8						m_nbInputChannels;			iccNumberUInt8						m_nbOutputChannels;			iccNumberUInt8						m_nbClutGridPoints;			iccNumberUInt8						m_padding;			std::vector<iccNumberS15Fixed16>	m_matrix;			iccNumberUInt8*						m_inputTables;			iccNumberUInt8*						m_clutValues;			iccNumberUInt8*						m_outputTables;};ICC_LIB_NAMESPACE_END#endif//_H_iccTagLut8_H_