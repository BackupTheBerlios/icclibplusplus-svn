#include "iccTagText.h"using namespace std;USING_ICC_LIB_NAMESPACE//--------------------------------------------------------------------iccTagText& iccTagText::operator=(const iccTagText& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_string = inTag.m_string;	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagText::GetSizeSelf(void) const{	return	m_string.size() + 1; // +1 for terminating 0}//--------------------------------------------------------------------iccError iccTagText::LoadSelf(istream& inStream,unsigned long inSize){	long	insize	= inSize;	char	*buffer	= NULL;		m_string.clear();	inStream.get(buffer, inSize);	m_string = buffer;	insize -= inStream.gcount();		return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagText::SaveSelf(ostream& outStream,unsigned long& outSize) const{	outStream.write(m_string.data(), m_string.size() + 1);	outSize += m_string.size() + 1;	return iccErrorNone;}//--------------------------------------------------------------------void iccTagText::InspectSelf(std::vector<iccTagInspector>& outErrorList) const{	if(m_string[m_string.size() - 1] != 0)		outErrorList.push_back(	iccTagInspector(									GetSignature(),									GetTypeSignature(),									iccTagInspector::ICC_TAG_ERROR_SEVERITY_MINOR,									true,									iccTagInspector::ICC_TAG_GENERIC_ERROR_BAD_STRING,									iccTagInspector::ICC_TAG_ERROR_TEXT_NO_TERMINATING_ZERO								) );}//--------------------------------------------------------------------void iccTagText::AutoCorrectSelf(const vector<iccTagInspector>& inErrorList){	vector<iccTagInspector>::const_iterator	itError,											itErrorEnd;	for(itError=inErrorList.begin(),itErrorEnd=inErrorList.end(); itError!=itErrorEnd; itError++)	{		if(			itError->GetTagSignature() == GetSignature()			&& itError->GetTagTypeSignature() == GetTypeSignature()			&& itError->IsAutoCorrective()		)			switch(itError->GetSpecificError())			{				case iccTagInspector::ICC_TAG_ERROR_TEXT_NO_TERMINATING_ZERO:					m_string.push_back(0);					break;				default:					break;			}	}}