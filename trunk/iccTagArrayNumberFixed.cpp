#include "iccTagArrayNumberFixed.h"using namespace std;USING_ICC_LIB_NAMESPACE//--------------------------------------------------------------------template <typename T>iccTagArrayNumberFixed<T>& iccTagArrayNumberFixed<T>::operator=(const iccTagArrayNumberFixed<T>& inTag){	if(this != &inTag)	{		m_numbers = inTag.m_numbers;	}	return *this;}//--------------------------------------------------------------------template <typename T>unsigned long iccTagArrayNumberFixed<T>::GetSizeSelf(void) const{	return	T::Size()*m_numbers.size();}//--------------------------------------------------------------------template <typename T>iccError iccTagArrayNumberFixed<T>::LoadSelf(istream& inStream,unsigned long inSize){	T		number;	long	size = inSize;	while(	0 < size			&& !inStream.eof() )	{		inStream >> number;		m_numbers.push_back(number);		size -= T::Size();	}		return iccErrorNone;}//--------------------------------------------------------------------template <typename T>iccError iccTagArrayNumberFixed<T>::SaveSelf(ostream& outStream,unsigned long& outSize) const{	unsigned long	i		= 0,					imax	= 0;	for(i=0,imax=m_numbers.size(); i<imax; i++)	{		outStream << m_numbers[i];		outSize += T::Size();	}	return iccErrorNone;}