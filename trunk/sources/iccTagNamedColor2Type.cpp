#include "iccTagNamedColor2Type.h"using namespace std;USING_ICC_LIB_NAMESPACEconst unsigned long	kStringSize	= 32;//--------------------------------------------------------------------iccTagNamedColor2Type& iccTagNamedColor2Type::operator=(const iccTagNamedColor2Type& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_vendorSpecificFlag	= inTag.m_vendorSpecificFlag;		m_count					= inTag.m_count;		m_nbDeviceCoordinates	= inTag.m_nbDeviceCoordinates;		m_namePrefix			= inTag.m_namePrefix;		m_nameSuffix			= inTag.m_nameSuffix;		m_colors				= inTag.m_colors;	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagNamedColor2Type::GetSizeSelf(void) const{	unsigned long	size	= 0,					i		= 0,					imax	= 0;		for(i=0,imax=m_colors.size(); i<imax; i++)		size += m_colors[i].GetSize();			return	sizeof m_vendorSpecificFlag			+ sizeof m_count			+ sizeof m_nbDeviceCoordinates			+ 32			+ 32			+ size;}//--------------------------------------------------------------------iccError iccTagNamedColor2Type::LoadSelf(istream& inStream,unsigned long inSize){	NamedColor		color;	iccNumberUInt32	i		= 0;	iccNumberUInt16	coord	= 0;	unsigned long	j		= 0;	char			*buffer	= NULL;		inStream >> m_vendorSpecificFlag;	inStream >> m_count;	inStream >> m_nbDeviceCoordinates;	try	{		buffer = new char[kStringSize];				memcpy(buffer, 0, kStringSize);		inStream.get(buffer, kStringSize);		m_namePrefix = buffer;		memcpy(buffer, 0, kStringSize);		inStream.get(buffer, kStringSize);		m_nameSuffix = buffer;		memcpy(buffer, 0, kStringSize);		inStream.get(buffer, kStringSize);		m_namePrefix = buffer;	}	catch(...)		{			delete(buffer);			return iccErrorMemory;		}	for(i=0; i<m_count; i++)	{		memcpy(buffer, 0, kStringSize);		inStream.get(buffer, kStringSize);		color.m_rootName = buffer;				for(j=0; j<3; j++)			inStream >> color.m_pcsCoordinates[j];		for(j=0; j<m_nbDeviceCoordinates; j++)		{			inStream >> coord;			color.m_deviceCoordinates.push_back(coord);		}				m_colors.push_back(color);	}	delete(buffer);		return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagNamedColor2Type::SaveSelf(ostream& outStream,unsigned long& outSize) const{	NamedColor	color;	long		j		= 0,				i		= 0,				imax	= 0;		outStream << m_vendorSpecificFlag;	outStream << m_count;	outStream << m_nbDeviceCoordinates;	for(i=0,imax=m_namePrefix.size(); i<kStringSize && i<imax; i++)		outStream << m_namePrefix[i];	for(; i<kStringSize; i++)		outStream << (char)0;		for(i=0,imax=m_nameSuffix.size(); i<kStringSize && i<imax; i++)		outStream << m_nameSuffix[i];	for(; i<kStringSize; i++)		outStream << (char)0;		for(j=0; j<m_count; j++)	{		color = m_colors[j];				for(i=0,imax=color.m_rootName.size(); i<kStringSize && i<imax; i++)			outStream << color.m_rootName[i];		for(; i<kStringSize; i++)			outStream << (char)0;				for(i=0; i<3; i++)			outStream << color.m_pcsCoordinates[i];		for(i=0,imax=color.m_deviceCoordinates.size(); i<imax; i++)			outStream << color.m_deviceCoordinates[i];	}	return iccErrorNone;}