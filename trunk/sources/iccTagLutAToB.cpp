#include "iccTagLutAToB.h"#include "iccTagCurve.h"#include "iccTagParametricCurve.h"using namespace std;USING_ICC_LIB_NAMESPACE#define CLUT_NBGRIDPOINTS_MAX_SIZE	16//--------------------------------------------------------------------size_t iccTagLutAToB::CLUT::GetSize(){	return	m_nbGridPoints.size() * sizeof m_nbGridPoints[0]			+ sizeof m_precision			+ sizeof m_padding;#pragma message("TO DO")}//--------------------------------------------------------------------iccTagLutAToB::CLUT& iccTagLutAToB::CLUT::operator=(const CLUT& inLUT){	if(this != &inLUT)	{		m_nbGridPoints	= inLUT.m_nbGridPoints;		m_precision		= inLUT.m_precision;		m_padding		= inLUT.m_padding;		m_dataPoints	= inLUT.m_dataPoints;	}	return *this;}//--------------------------------------------------------------------iccTagLutAToB::~iccTagLutAToB(){	delete(m_B);	delete(m_M);	delete(m_CLUT);	delete(m_A);	m_B		= NULL;	m_M		= NULL;	m_CLUT	= NULL;	m_A		= NULL;}//--------------------------------------------------------------------iccTagLutAToB& iccTagLutAToB::operator=(const iccTagLutAToB& inTag){	if(this != &inTag)	{		*(iccTag*)this = *(iccTag*)&inTag;		m_nbInputChannels	= inTag.m_nbInputChannels;		m_nbOutputChannels	= inTag.m_nbOutputChannels;		m_padding			= inTag.m_padding;		m_offsetToB			= inTag.m_offsetToB;		m_offsetToMatrix	= inTag.m_offsetToMatrix;		m_offsetToM			= inTag.m_offsetToM;		m_offsetToCLUT		= inTag.m_offsetToCLUT;		m_offsetToA			= inTag.m_offsetToA;		delete(m_B);		if(dynamic_cast<iccTagCurve*>(inTag.m_B) != NULL)			m_B = new iccTagCurve(dynamic_cast<iccTagCurve*>(inTag.m_B));		else		if(dynamic_cast<iccTagParametricCurve*>(inTag.m_B) != NULL)			m_B = new iccTagParametricCurve(dynamic_cast<iccTagParametricCurve*>(inTag.m_B));		m_matrix = inTag.m_matrix;		delete(m_M);		if(dynamic_cast<iccTagCurve*>(inTag.m_M) != NULL)			m_M = new iccTagCurve(dynamic_cast<iccTagCurve*>(inTag.m_M));		else		if(dynamic_cast<iccTagParametricCurve*>(inTag.m_M) != NULL)			m_M = new iccTagParametricCurve(dynamic_cast<iccTagParametricCurve*>(inTag.m_M));				delete(m_CLUT);		m_CLUT = new CLUT(inTag.m_CLUT);		delete(m_A);		if(dynamic_cast<iccTagCurve*>(inTag.m_A) != NULL)			m_A = new iccTagCurve(dynamic_cast<iccTagCurve*>(inTag.m_A));		else		if(dynamic_cast<iccTagParametricCurve*>(inTag.m_A) != NULL)			m_A = new iccTagParametricCurve(dynamic_cast<iccTagParametricCurve*>(inTag.m_A));	}	return *this;}//--------------------------------------------------------------------unsigned long iccTagLutAToB::GetSizeSelf(void) const{#pragma message("TO DO")}//--------------------------------------------------------------------iccError iccTagLutAToB::LoadSelf(istream& inStream,unsigned long inSize){#pragma message("TO DO")	return iccErrorNone;}//--------------------------------------------------------------------iccError iccTagLutAToB::SaveSelf(ostream& outStream,unsigned long& outSize) const{#pragma message("TO DO")	return iccErrorNone;}